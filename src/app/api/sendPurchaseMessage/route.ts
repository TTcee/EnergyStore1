import { NextRequest, NextResponse } from 'next/server';

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏
interface PurchaseFormData {
  name: string;
  phone: string;
  productDetails: {
    model: string;
    voltage: string;
    capacity: string;
    hailong: string;
    price: number;
  };
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
function formatPhoneNumber(phone: string): string {
  // –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
  const cleaned = phone.replace(/[\s\-\(\)]/g, '');
  
  // –î–æ–¥–∞—î–º–æ +38 —è–∫—â–æ –Ω–µ–º–∞—î
  if (!cleaned.startsWith('+')) {
    return cleaned.startsWith('38') ? `+${cleaned}` : `+38${cleaned}`;
  }
  
  return cleaned;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Telegram
async function sendPurchaseToTelegram(data: PurchaseFormData): Promise<{ success: boolean; error?: string }> {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  console.log('Purchase Environment check:', {
    hasToken: !!token,
    hasChatId: !!chatId,
    tokenLength: token?.length || 0,
    chatId: chatId
  });

  if (!token || !chatId) {
    console.error('Telegram credentials not configured');
    return { 
      success: false, 
      error: 'Telegram credentials not configured' 
    };
  }

  // –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
  const formattedPhone = formatPhoneNumber(data.phone);
  const { productDetails } = data;
  
  const message = `üõí <b>–ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!</b>

üë§ <b>–ö–ª—ñ—î–Ω—Ç:</b> ${data.name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formattedPhone}

üîã <b>–¢–û–í–ê–†: Hailong –∞–∫—É–º—É–ª—è—Ç–æ—Ä</b>
‚Ä¢ <b>–•—ñ–º—ñ—è:</b> ${productDetails.model}
‚Ä¢ <b>–ù–∞–ø—Ä—É–≥–∞:</b> ${productDetails.voltage}
‚Ä¢ <b>–Ñ–º–Ω—ñ—Å—Ç—å:</b> ${productDetails.capacity}
‚Ä¢ <b>–ú–æ–¥–µ–ª—å:</b> ${productDetails.hailong}
üí∞ <b>–¶—ñ–Ω–∞:</b> ${productDetails.price} ‚Ç¥

üìÖ <b>–ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${new Date().toLocaleString('uk-UA', {
    timeZone: 'Europe/Kiev',
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })}

<a href="tel:${formattedPhone}">üìû –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—É</a>`;

  const telegramUrl = `https://api.telegram.org/bot${token}/sendMessage`;
  
  console.log('Sending purchase order to Telegram:', {
    url: telegramUrl.replace(token, 'BOT_TOKEN_HIDDEN'),
    chatId,
    messageLength: message.length
  });

  try {
    const response = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      }),
    });

    const result = await response.json();
    
    console.log('Telegram API response for purchase:', {
      status: response.status,
      ok: response.ok,
      result: result
    });

    if (!response.ok || !result.ok) {
      console.error('Telegram API error for purchase:', result);
      return { 
        success: false, 
        error: result.description || 'Telegram API error' 
      };
    }

    return { success: true };
  } catch (error) {
    console.error('Error sending purchase to Telegram:', error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    };
  }
}

// POST –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É
export async function POST(req: NextRequest) {
  console.log('Purchase API route called at:', new Date().toISOString());
  
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Content-Type
    const contentType = req.headers.get('content-type');
    console.log('Purchase request content-type:', contentType);

    if (!contentType?.includes('application/json')) {
      console.error('Invalid content-type:', contentType);
      return NextResponse.json(
        { error: 'Invalid content-type. Expected application/json' },
        { status: 400 }
      );
    }

    // –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
    let data: PurchaseFormData;
    
    try {
      data = await req.json();
      console.log('Parsed purchase data:', { 
        name: data.name, 
        phone: data.phone?.slice(0, 5) + '***',
        productDetails: data.productDetails
      });
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
      return NextResponse.json(
        { error: 'Invalid JSON data' },
        { status: 400 }
      );
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    if (!data.name || !data.phone) {
      console.error('Missing required fields:', { hasName: !!data.name, hasPhone: !!data.phone });
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –≤—Å—ñ –ø–æ–ª—è' },
        { status: 400 }
      );
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä—É
    if (!data.productDetails || !data.productDetails.model || !data.productDetails.voltage || 
        !data.productDetails.capacity || !data.productDetails.hailong || !data.productDetails.price) {
      console.error('Missing product details:', data.productDetails);
      return NextResponse.json(
        { error: '–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä' },
        { status: 400 }
      );
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ
    const nameRegex = /^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ'\-\s]{2,50}$/;
    if (!nameRegex.test(data.name.trim())) {
      console.error('Invalid name format:', data.name);
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º\'—è' },
        { status: 400 }
      );
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const phoneRegex = /^(\+?38)?[0-9]{10}$/;
    const cleanPhone = data.phone.replace(/[\s\-\(\)]/g, '');
    if (!phoneRegex.test(cleanPhone)) {
      console.error('Invalid phone format:', cleanPhone);
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É' },
        { status: 400 }
      );
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ü—ñ–Ω–∏
    if (typeof data.productDetails.price !== 'number' || data.productDetails.price <= 0) {
      console.error('Invalid price:', data.productDetails.price);
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É' },
        { status: 400 }
      );
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ Telegram
    console.log('Attempting to send purchase order to Telegram...');
    const result = await sendPurchaseToTelegram(data);

    if (result.success) {
      console.log('Successfully sent purchase order to Telegram');
      return NextResponse.json(
        { message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ' },
        { status: 200 }
      );
    } else {
      console.error('Failed to send purchase order to Telegram:', result.error);
      return NextResponse.json(
        { error: `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${result.error}` },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Purchase API route error:', error);
    return NextResponse.json(
      { 
        error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

// OPTIONS –º–µ—Ç–æ–¥ –¥–ª—è CORS
export async function OPTIONS(req: NextRequest) {
  return new NextResponse(null, { 
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  });
}